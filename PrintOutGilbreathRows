import numpy as np

def primesfrom2to(n):
    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    """ Input n>=6, Returns a array of primes, 2 <= p < n """
    sieve = np.ones(n/3 + (n%6==2), dtype=np.bool)
    sieve[0] = False
    for i in xrange(int(n**0.5)/3+1):
        if sieve[i]:
            k=3*i+1|1
            sieve[      ((k*k)/3)      ::2*k] = False
            sieve[(k*k+4*k-2*k*(i&1))/3::2*k] = False
    return np.r_[2,3,((3*np.nonzero(sieve)[0]+1)|1)]

def computeNextLine(anArray):
    ans = []
    lastIndex = len(anArray)-1
    #print("lastIndex: "+str(lastIndex))
    for index, val in enumerate(anArray):
        #print("index: "+str(index))
        if index<lastIndex:
            ans.append(abs(val-anArray[index+1]))
        else:
            return ans
            
def computeAllLines(n, printOut = False):
    def printOutAns(finalAns):
        for val in ans:
            print(val)
        
    first = primesfrom2to(n).tolist()
    ans = [first]
    for _ in range(len(first)-1):
        #print("last ans: {}".format(ans[-1]))
        ans.append(computeNextLine(ans[-1]))
    if printOut:
        printOutAns(ans)
    return ans
    
def test():
    computeAllLines(100, True)

test()
